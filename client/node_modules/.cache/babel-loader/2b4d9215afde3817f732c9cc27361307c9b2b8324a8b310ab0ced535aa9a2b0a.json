{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst RETRY_DELAYS = [2000, 4000, 8000]; // Exponential backoff delays\nconst QUALITY_LEVELS = ['low', 'medium', 'high'];\nexport const useImageLoader = () => {\n  _s();\n  const [loadedImages, setLoadedImages] = useState(new Map());\n  const [errorImages, setErrorImages] = useState(new Map());\n  const [retryCount, setRetryCount] = useState(new Map());\n  const loadImageProgressively = useCallback(async (imageUrl, onProgress) => {\n    if (loadedImages.has(imageUrl)) {\n      return loadedImages.get(imageUrl);\n    }\n    for (const quality of QUALITY_LEVELS) {\n      try {\n        const url = new URL(imageUrl, window.location.origin);\n        url.searchParams.set('quality', quality);\n        const img = new Image();\n        const loadPromise = new Promise((resolve, reject) => {\n          img.onload = () => resolve(img);\n          img.onerror = reject;\n        });\n        img.src = url.toString();\n        await loadPromise;\n        onProgress === null || onProgress === void 0 ? void 0 : onProgress(quality);\n        if (quality === 'high') {\n          setLoadedImages(prev => new Map(prev).set(imageUrl, img));\n          setErrorImages(prev => {\n            const newMap = new Map(prev);\n            newMap.delete(imageUrl);\n            return newMap;\n          });\n        }\n      } catch (error) {\n        console.error(`Failed to load image at quality ${quality}:`, error);\n        if (quality === 'high') {\n          handleImageError(imageUrl);\n        }\n      }\n    }\n  }, [loadedImages]);\n  const handleImageError = useCallback(imageUrl => {\n    const currentRetries = retryCount.get(imageUrl) || 0;\n    if (currentRetries < RETRY_DELAYS.length) {\n      setRetryCount(prev => new Map(prev).set(imageUrl, currentRetries + 1));\n      setErrorImages(prev => new Map(prev).set(imageUrl, {\n        retryCount: currentRetries + 1,\n        nextRetry: Date.now() + RETRY_DELAYS[currentRetries]\n      }));\n\n      // Schedule retry\n      setTimeout(() => {\n        loadImageProgressively(imageUrl, () => {});\n      }, RETRY_DELAYS[currentRetries]);\n    } else {\n      setErrorImages(prev => new Map(prev).set(imageUrl, {\n        retryCount: currentRetries,\n        failed: true\n      }));\n    }\n  }, [retryCount, loadImageProgressively]);\n  const resetImageError = useCallback(imageUrl => {\n    setRetryCount(prev => {\n      const newMap = new Map(prev);\n      newMap.delete(imageUrl);\n      return newMap;\n    });\n    setErrorImages(prev => {\n      const newMap = new Map(prev);\n      newMap.delete(imageUrl);\n      return newMap;\n    });\n    loadImageProgressively(imageUrl, () => {});\n  }, [loadImageProgressively]);\n  return {\n    loadImage: loadImageProgressively,\n    resetError: resetImageError,\n    getImageError: imageUrl => errorImages.get(imageUrl),\n    isImageLoaded: imageUrl => loadedImages.has(imageUrl),\n    getLoadedImage: imageUrl => loadedImages.get(imageUrl)\n  };\n};\n_s(useImageLoader, \"zwpbSbRC1fgLXP+7sOxoGlUpP4Y=\");","map":{"version":3,"names":["useState","useCallback","RETRY_DELAYS","QUALITY_LEVELS","useImageLoader","_s","loadedImages","setLoadedImages","Map","errorImages","setErrorImages","retryCount","setRetryCount","loadImageProgressively","imageUrl","onProgress","has","get","quality","url","URL","window","location","origin","searchParams","set","img","Image","loadPromise","Promise","resolve","reject","onload","onerror","src","toString","prev","newMap","delete","error","console","handleImageError","currentRetries","length","nextRetry","Date","now","setTimeout","failed","resetImageError","loadImage","resetError","getImageError","isImageLoaded","getLoadedImage"],"sources":["C:/Users/iLogic/Desktop/sneakeralot_v_0.2/client/src/components/home/Hero/hooks/useImageLoader.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\n\r\nconst RETRY_DELAYS = [2000, 4000, 8000]; // Exponential backoff delays\r\nconst QUALITY_LEVELS = ['low', 'medium', 'high'];\r\n\r\nexport const useImageLoader = () => {\r\n  const [loadedImages, setLoadedImages] = useState(new Map());\r\n  const [errorImages, setErrorImages] = useState(new Map());\r\n  const [retryCount, setRetryCount] = useState(new Map());\r\n\r\n  const loadImageProgressively = useCallback(async (imageUrl, onProgress) => {\r\n    if (loadedImages.has(imageUrl)) {\r\n      return loadedImages.get(imageUrl);\r\n    }\r\n\r\n    for (const quality of QUALITY_LEVELS) {\r\n      try {\r\n        const url = new URL(imageUrl, window.location.origin);\r\n        url.searchParams.set('quality', quality);\r\n        \r\n        const img = new Image();\r\n        const loadPromise = new Promise((resolve, reject) => {\r\n          img.onload = () => resolve(img);\r\n          img.onerror = reject;\r\n        });\r\n\r\n        img.src = url.toString();\r\n        await loadPromise;\r\n\r\n        onProgress?.(quality);\r\n        \r\n        if (quality === 'high') {\r\n          setLoadedImages(prev => new Map(prev).set(imageUrl, img));\r\n          setErrorImages(prev => {\r\n            const newMap = new Map(prev);\r\n            newMap.delete(imageUrl);\r\n            return newMap;\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(`Failed to load image at quality ${quality}:`, error);\r\n        if (quality === 'high') {\r\n          handleImageError(imageUrl);\r\n        }\r\n      }\r\n    }\r\n  }, [loadedImages]);\r\n\r\n  const handleImageError = useCallback((imageUrl) => {\r\n    const currentRetries = retryCount.get(imageUrl) || 0;\r\n    \r\n    if (currentRetries < RETRY_DELAYS.length) {\r\n      setRetryCount(prev => new Map(prev).set(imageUrl, currentRetries + 1));\r\n      setErrorImages(prev => new Map(prev).set(imageUrl, {\r\n        retryCount: currentRetries + 1,\r\n        nextRetry: Date.now() + RETRY_DELAYS[currentRetries]\r\n      }));\r\n\r\n      // Schedule retry\r\n      setTimeout(() => {\r\n        loadImageProgressively(imageUrl, () => {});\r\n      }, RETRY_DELAYS[currentRetries]);\r\n    } else {\r\n      setErrorImages(prev => new Map(prev).set(imageUrl, {\r\n        retryCount: currentRetries,\r\n        failed: true\r\n      }));\r\n    }\r\n  }, [retryCount, loadImageProgressively]);\r\n\r\n  const resetImageError = useCallback((imageUrl) => {\r\n    setRetryCount(prev => {\r\n      const newMap = new Map(prev);\r\n      newMap.delete(imageUrl);\r\n      return newMap;\r\n    });\r\n    setErrorImages(prev => {\r\n      const newMap = new Map(prev);\r\n      newMap.delete(imageUrl);\r\n      return newMap;\r\n    });\r\n    loadImageProgressively(imageUrl, () => {});\r\n  }, [loadImageProgressively]);\r\n\r\n  return {\r\n    loadImage: loadImageProgressively,\r\n    resetError: resetImageError,\r\n    getImageError: (imageUrl) => errorImages.get(imageUrl),\r\n    isImageLoaded: (imageUrl) => loadedImages.has(imageUrl),\r\n    getLoadedImage: (imageUrl) => loadedImages.get(imageUrl)\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}